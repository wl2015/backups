<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
">

  <!-- 建立spring-mybatis.xml配置文件

  这个文件就是用来完成spring和mybatis的整合的。这里面也没多少行配置，主要的就是 自动扫描，自动注入，配置数据库 。 -->
  
  <!-- 配置数据源。数据库连接池：Druid，据说目前最好的连接池 -->
  <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <property name="url" value="${jdbc_url}" />
    <property name="username" value="${jdbc_username}" />
    <property name="password" value="${jdbc_password}" />

    <!-- 初始化连接大小 -->
  <property name="initialSize" value="0" />
    <!-- 连接池最大使用连接数量 -->
    <property name="maxActive" value="20" />
    <!-- 连接池最大空闲 -->
    <property name="maxIdle" value="20" />
    <!-- 连接池最小空闲 -->
    <property name="minIdle" value="0" />
    <!-- 获取连接最大等待时间 -->
    <property name="maxWait" value="60000" />

    <!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

    <property name="validationQuery" value="${validationQuery}" />
    <property name="testOnBorrow" value="false" />
    <property name="testOnReturn" value="false" />
    <property name="testWhileIdle" value="true" />

    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="60000" />
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="25200000" />

    <!-- 打开removeAbandoned功能 -->
    <property name="removeAbandoned" value="true" />
    <!-- 1800秒，也就是30分钟 -->
    <property name="removeAbandonedTimeout" value="1800" />
    <!-- 关闭abanded连接时输出错误日志 -->
    <property name="logAbandoned" value="true" />

    <!-- 监控数据库 -->
    <!-- <property name="filters" value="stat" /> 开启Druid的监控统计功能-->
    <property name="filters" value="mergeStat" />
  </bean>

  <!-- myBatis文件 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource" />
    <property name="configLocation" value="classpath:sqlmap-config.xml" />
    <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
    <property name="mapperLocations" value="classpath:com/yc/mapping/*.xml" />
  </bean>
  <!-- DAO接口所在包名，Spring会自动查找其下的类 （只需提供接口不需提供实现类 ）-->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.yc.dao" />
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
  </bean>

  <!-- 配置事务管理器 -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource" />
  </bean>

  <!-- 注解方式配置事物 -->
   <tx:annotation-driven transaction-manager="transactionManager" />
 
  <!-- 拦截器方式配置事物 -->
  <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
    <tx:attributes>
    <!-- 表示事务的开始策略。
propagation="REQUIRED"  表示name的那个方法必须要在一个事务的环境中运行。
read-only="true"  表示只读事务，就是不涉及到数据的修改，只是查询，这是对事务的优化。 -->
<!-- PROPAGATION_REQUIRED 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 -->
      <tx:method name="add*" propagation="REQUIRED"  rollback-for="java.lang.Exception" />
      <tx:method name="append*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
      <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
      <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
      <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
      <tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
      <tx:method name="edit*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
      <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
      <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
      <tx:method name="repair" propagation="REQUIRED" rollback-for="java.lang.Exception" />
      <tx:method name="delAndRepair" propagation="REQUIRED" rollback-for="java.lang.Exception" />
<!-- PROPAGATION_SUPPORTS支持当前事务，如果当前没有事务，就以非事务方式执行。 -->
      <tx:method name="get*" propagation="SUPPORTS" />
      <tx:method name="find*" propagation="SUPPORTS" />
      <tx:method name="load*" propagation="SUPPORTS" />
      <tx:method name="search*" propagation="SUPPORTS" />
      <tx:method name="datagrid*" propagation="SUPPORTS" />

      <tx:method name="*" propagation="SUPPORTS" />
    </tx:attributes>
  </tx:advice>
  <!--  配置参与事务的类 -->
  <!--  aop:pointcut标签配置参与事务的类，由于是在Service中进行数据库业务操作，配的应该是包含那些作为事务的方法的Service类。
              其中第一个*代表返回值，第二*代表service下子包，第三个*代表方法名，“（..）”代表方法参数。-->

  <aop:config>
    <aop:pointcut id="transactionPointcut" expression="execution(* com.yc.service.impl.*Impl.*(..))" />
    <!--  aop:advisor标签就是把上面我们所配置的事务管理两部分属性整合起来作为整个事务管理。 -->
    <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
  </aop:config>


  <!-- 配置druid监控spring jdbc -->
  <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
  </bean>
  <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
    <property name="patterns">
      <list>
        <value>com.yc.service.*</value>
      </list>
    </property>
  </bean>
  
  <aop:config>
    <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
  </aop:config>
</beans>